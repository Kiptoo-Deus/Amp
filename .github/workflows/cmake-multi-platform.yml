name: Amp

on:
  workflow_dispatch:  # allows manual triggering from the GitHub Actions UI
  push:

concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true

env:
  BUILD_TYPE: Release
  BUILD_DIR: Builds
  name: Amp
  DISPLAY: :0
  CMAKE_BUILD_PARALLEL_LEVEL: 3
  HOMEBREW_NO_INSTALL_CLEANUP: 1

jobs:
  build_and_test:
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: Windows
            os: windows-latest
            pluginval-binary: ./pluginval.exe
            ccache: sccache
          - name: macOS
            os: macos-latest
            pluginval-binary: ./pluginval
            ccache: ccache
          - name: Ubuntu
            os: ubuntu-latest
            pluginval-binary: ./pluginval
            ccache: ccache

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: true

    - name: Set up Clang (Ubuntu/macOS)
      if: matrix.os != 'windows-latest'
      uses: llvm/llvm-project@main
      with:
        install-clang: true

    - name: Install dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: sudo apt-get update && sudo apt-get install -y cmake ninja-build gcc g++ clang

    - name: Install dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: brew install cmake ninja clang

    - name: Install dependencies (Windows)
      if: matrix.os == 'windows-latest'
      run: choco install ninja cmake llvm sccache

    - name: Configure the build using CMake
      run: cmake -B ${{ env.BUILD_DIR }} -G "Ninja" -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} -DCMAKE_C_COMPILER_LAUNCHER=${{ matrix.ccache }} -DCMAKE_CXX_COMPILER_LAUNCHER=${{ matrix.ccache }} .

    - name: Build the project
      run: cmake --build ${{ env.BUILD_DIR }} --config ${{ env.BUILD_TYPE }} --parallel 4

    - name: Package artifacts
      if: success() || failure()
      run: |
        if [ ${{ matrix.os }} == 'ubuntu-latest' ]; then
          tar -czf minimal_plugin-linux.tar.gz -C ${{ env.BUILD_DIR }} .
        elif [ ${{ matrix.os }} == 'macos-latest' ]; then
          tar -czf minimal_plugin-macos.tar.gz -C ${{ env.BUILD_DIR }} .
        elif [ ${{ matrix.os }} == 'windows-latest' ]; then
          powershell Compress-Archive -Path ${{ env.BUILD_DIR }}\* -DestinationPath minimal_plugin-windows.zip
        fi

    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: ${{ matrix.name }}-artifacts
        path: |
          minimal_plugin-*.tar.gz
          minimal_plugin-*.zip

name: Amp

on:
    workflow_dispatch: # lets you run a build from the UI
    push:

concurrency:
    group: ${{ github.ref }}
    cancel-in-progress: true

env:
    BUILD_TYPE: Release
    BUILD_DIR: Builds
    name: GBS
    DISPLAY: :0
    CMAKE_BUILD_PARALLEL_LEVEL: 3
    HOMEBREW_NO_INSTALL_CLEANUP: 1

jobs:
  build_and_test:
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    strategy: 
      fail-fast: false
      matrix:
        include:
          # Uncomment this block to add Windows support
          - name: Windows
            os: windows-latest
            pluginval-binary: ./pluginval.exe
            ccache: sccache
    
    steps:
    # Set up Clang for non-Windows
    - name: Set up Clang
      if: runner.os != 'Windows'
      uses: egor-tensin/setup-clang@v1

    # Install Ninja on Windows
    - name: Install Ninja (Windows)
      if: runner.os == 'Windows'
      shell: bash
      run: choco install ninja sccache
    
    # Checkout the code
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: true

    # Set up sccache for caching builds on Windows
    - name: sccache
      uses: actions/cache@v3
      with:
        path: sccache
        key: ${{ runner.os }}-sccache-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-sccache-

    # Configure the build using CMake
    - name: Configure
      shell: bash
      run: cmake -B ${{ env.BUILD_DIR }} -G "Ninja" -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE}} -DCMAKE_C_COMPILER_LAUNCHER=sccache -DCMAKE_CXX_COMPILER_LAUNCHER=sccache .

    # Build the project
    - name: Build
      shell: bash
      run: cmake --build ${{ env.BUILD_DIR }} --config ${{ env.BUILD_TYPE }} --parallel 4

    # Read in .env from CMake
    - name: Read in .env from CMake
      shell: bash
      run: |
        cat .env
        cat .env >> $GITHUB_ENV

    # Set additional environment variables for next steps
    - name: Set additional env vars for next steps
      shell: bash
      run: |
        echo "ARTIFACTS_PATH=${{ env.BUILD_DIR }}/plugins/${{ env.name }}/${{ env.name }}_artefacts/${{ env.BUILD_TYPE }}" >> $GITHUB_ENV
        echo "VST3_PATH=${{ env.name }}_artefacts/${{ env.BUILD_TYPE }}/VST3/${{ env.PRODUCT_NAME }}.vst3" >> $GITHUB_ENV
        echo "AAX_PATH=${{ env.name }}_artefacts/${{ env.BUILD_TYPE }}/AAX/${{ env.PRODUCT_NAME }}.aaxplugin" >> $GITHUB_ENV
        echo "ARTIFACT_NAME=${{ env.PRODUCT_NAME }}-${{ env.VERSION }}-${{ matrix.name }}" >> $GITHUB_ENV

    # Validate VST3 plugin using pluginval
    - name: Pluginval
      working-directory: ${{ env.BUILD_DIR }}
      shell: bash
      run: |
        curl -LO "https://github.com/Tracktion/pluginval/releases/download/v1.0.3/pluginval_windows.zip"
        7z x pluginval_windows.zip
        ${{ matrix.pluginval-binary }} --strictness-level 10 --verbose --validate "./plugins/GBS/${{ env.VST3_PATH }}"

    # Upload .env file for Windows
    - name: Upload .env (Windows)
      if: ${{ matrix.name == 'Windows' }}
      uses: actions/upload-artifact@v3
      with:
        name: env-file-windows
        path: .env

    # Upload build artifacts for Windows
    - name: Upload build artefacts (Windows)
      if: ${{ matrix.name == 'Windows' }}
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.PRODUCT_NAME }}-build-output-windows
        path: |
          ${{ env.ARTIFACTS_PATH }}
          !${{ env.ARTIFACTS_PATH }}/**/*.a
          !${{ env.ARTIFACTS_PATH }}/**/*.lib
